commit 73d02c3b3eb8b828a1cc7ae04a4cc4f4875c3ddd
Author: Nicolas Grekas <nicolas.grekas@gmail.com>
Date: Thu, 16 Apr 2020 00:11:38 +0200
Description: Fix bug #79447
 Partially reverts 846b6479537a112d1ded725e6484e46462048b35: instead of
 throwing, this skips uninitialized typed properties when serializing objects.
 
 This makes serialize with __sleep() behave the same as serialize()
 without __sleep().
 
 As in the non-__sleep() case, unserialize(serialize($x)) identity
 may not be preserved due to replacement of uninitialized/unset
 properties with default values. Fixing this will require changes to
 the serialization format.
 
 Closes GH-5396.
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1999598
Bug: https://bugs.php.net/bug.php?id=79447
Origin: backport, https://github.com/php/php-src/commit/73d02c3b3eb8b828a1cc7ae04a4cc4f4875c3ddd
Last-Update: 2022-12-14

Index: php7.4-7.4.3/ext/standard/tests/serialize/sleep_uninitialized_typed_prop.phpt
===================================================================
--- php7.4-7.4.3.orig/ext/standard/tests/serialize/sleep_uninitialized_typed_prop.phpt	2022-12-14 11:47:32.074805621 +1300
+++ php7.4-7.4.3/ext/standard/tests/serialize/sleep_uninitialized_typed_prop.phpt	2022-12-14 11:47:32.070805541 +1300
@@ -1,5 +1,5 @@
 --TEST--
-Referencing an uninitialized typed property in __sleep() should result in Error
+Referencing an uninitialized typed property in __sleep() should be skipped
 --FILE--
 <?php
 
@@ -18,39 +18,27 @@
 }
 
 $t = new Test;
-try {
-    serialize($t);
-} catch (Error $e) {
-    echo $e->getMessage(), "\n";
-}
+var_dump(serialize($t));
+var_dump(unserialize(serialize($t)) == $t);
 
 $t->x = 1;
-try {
-    serialize($t);
-} catch (Error $e) {
-    echo $e->getMessage(), "\n";
-}
+var_dump(unserialize(serialize($t)) == $t);
 
 $t->y = 2;
-try {
-    serialize($t);
-} catch (Error $e) {
-    echo $e->getMessage(), "\n";
-}
+var_dump(unserialize(serialize($t)) == $t);
 
 $t->z = 3;
-try {
-    var_dump(unserialize(serialize($t)));
-} catch (Error $e) {
-    echo $e->getMessage(), "\n";
-}
+var_dump(unserialize(serialize($t)) == $t);
 
+var_dump($t);
 ?>
 --EXPECT--
-Typed property Test::$x must not be accessed before initialization (in __sleep)
-Typed property Test::$y must not be accessed before initialization (in __sleep)
-Typed property Test::$z must not be accessed before initialization (in __sleep)
-object(Test)#3 (3) {
+string(15) "O:4:"Test":0:{}"
+bool(true)
+bool(true)
+bool(true)
+bool(true)
+object(Test)#1 (3) {
   ["x"]=>
   int(1)
   ["y":protected]=>
Index: php7.4-7.4.3/ext/standard/var.c
===================================================================
--- php7.4-7.4.3.orig/ext/standard/var.c	2022-12-14 11:47:32.074805621 +1300
+++ php7.4-7.4.3/ext/standard/var.c	2022-12-14 11:47:32.070805541 +1300
@@ -784,9 +784,7 @@
 		if (Z_TYPE_P(val) == IS_UNDEF) {
 			zend_property_info *info = zend_get_typed_property_info_for_slot(Z_OBJ_P(struc), val);
 			if (info) {
-				zend_throw_error(NULL,
-					"Typed property %s::$%s must not be accessed before initialization (in __sleep)",
-					ZSTR_VAL(Z_OBJCE_P(struc)->name), ZSTR_VAL(error_name));
+				return SUCCESS;
 			}
 			return FAILURE;
 		}
